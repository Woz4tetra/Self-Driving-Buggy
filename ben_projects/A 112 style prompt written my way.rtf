{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12140\viewh9000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs26 \cf0 Your task: take in sensor data (current position) and an expected position and output servo direction.\
\
\'95 Why (why should you care?): because this is the last software roadblock between now and cheap robots that can drive themselves\
\'95 How (how are you to do this?): by using the PID algorithm: https://en.wikipedia.org/wiki/PID_controller#Pseudocode\
\'95 What (what do you need to do it?): the frameworks I've created in "Self-Driving Buggy Rev. 6"\
\
What you need specifically:\
\'95 the map will be generated by the "map" python module folder\
\'95 current location is determined by the sensors (in the _update function)\
\
Where you will work:\
\'95 In the files binder.py and pid.py\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 binder.py
\b0 \
\'95 binder.py's function is to 
\i bind
\i0  current location to a prerecorded map\
	\'95 The class Binder (in the file binder.py) holds the previous bind and some hidden sensor data handled by _update()\
\'95 you will implement Binder's bind function\
	\'95 
\b it takes in the class' object variables "self.prevBind" and "self.position" and binds them to class' "self.map" object
\b0 \
	\'95 "prevBind" is set to the new bind and is returned\
	\'95 self.map is a 2D list of gps longitude, latitude coordinates\
\

\b pid.py\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \'95 pid.py's function is to command the servo to a position according to a goal_position\
\'95 you may add any object variables and methods needed (make sure to follow the style guide)\
\'95 using the PID algorithm, 
\b take a current position and the input "goal_position" and command a servo value from 0 to 180}