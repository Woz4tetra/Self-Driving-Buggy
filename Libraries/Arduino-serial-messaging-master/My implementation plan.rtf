{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14200\viewh15040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs26 \cf0 Create simulation on PC. Make the following:\
\strike \strikec0 - convention for packets (follow Arduino-serial-messaging guidelines)\strike0\striked0 \
	- N00 - pc\
	- N01 - board\
	- Type\
		- 00 - command\
		- 01 - command reply\
		- 02 - 8-bit data\
		- 03 - 16-bit data\
		- 04 - data array\
		- 05 - data request\
		- 06 - data array request\
	- Parity - type ^ node ^ commandID ^ payload\
T = type\
N = node\
I = command id\
P = payload\
Q = quality\
T##N##I##P##Q##\
\strike \strikec0 - packet maker for 8-bit data and command\strike0\striked0 \
\strike \strikec0 - board simulation (packet parser, test handles for mangled data (parity bits don't match))\strike0\striked0 \
- queues for read and write\
\strike \strikec0 - try on a real board (use lots of asserts on both sides)\strike0\striked0 \
\strike \strikec0 - command reply, 16-bit data, data array, data request, data array request on pc and board simulation\strike0\striked0 \
- above on a real board}