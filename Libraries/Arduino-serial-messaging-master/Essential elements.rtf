{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12600\viewh7800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs26 \cf0 \
what parity bit is for: serialparser -> validate_packet\
	using the same parity bit calculator, the calculated parity bit should be the same as the actual one. If it is, the data arrived in one piece\
write and read serial have their own threads (put commands on threads to be processed)\
serialparser -> SerialParser\
	parse data packets\
serialcommunication -> send_command\
	where the command is made and sent\
controller\
	example of sending command to queue\
\
node number is where the packet came from (board or pc)\
SerialPacket -> Protocol.txt\
	based on the type, the data can be 8 bit, 16 bit, etc.\
	SerialPacket.cpp -> sendData, example of sending 16 bits\
SerialPacket -> sendPacket\
	create and send 8 bit payload\
SendPacketsOnRequest.ino\
	what I was aiming to do all along\
}